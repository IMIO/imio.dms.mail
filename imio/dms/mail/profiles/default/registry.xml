<registry xmlns:i18n="http://xml.zope.org/namespaces/i18n"
          i18n:domain="imio.dms.mail">

    <records interface="imio.dms.mail.browser.settings.IImioDmsMailConfig">
    </records>

    <records interface="plone.app.querystring.interfaces.IQueryField"
             prefix="plone.app.querystring.field.organization_type">
       <value key="title" i18n:translate="">organization_type_query_field</value>
       <value key="description" i18n:translate=""></value>
       <value key="enabled">True</value>
       <value key="sortable">True</value>
       <value key="operations">
           <element>plone.app.querystring.operation.string.is</element>
           <element>plone.app.querystring.operation.int.lessThan</element>
           <element>plone.app.querystring.operation.int.largerThan</element>
       </value>
       <value key="group" i18n:domain="plone" i18n:translate="">Dates</value>
    </records>

  <record interface="collective.contact.importexport.interfaces.IPipelineConfiguration"
          name="collective.contact.importexport.pipeline">
      <field type="plone.registry.field.Text">
          <title i18n:translate="">Pipeline to use to import contacts</title>
          <key_type type="plone.registry.field.Text" />
          <value_type type="plone.registry.field.Text" />
      </field>
<value>[transmogrifier]
pipeline =
    initialization
    csv_disk_source
#    csv_ssh_source
    csv_reader
    common_input_checks
    plonegrouporganizationpath
    plonegroupinternalparent
#    iadocs_inbw_subtitle
    dependencysorter
    relationsinserter
    updatepathinserter
    pathinserter
    constructor
    iadocs_userid
#    iadocs_creating_group
    schemaupdater
    reindexobject
    transitions_inserter
    workflowupdater
    breakpoint
    short_log
#    logger
    lastsection

# mandatory section !
[config]
# needed if contact encoding group is enabled in Plone
creating_group =
# if empty, first found directory is used. Else relative path in portal
directory_path =
csv_encoding = utf8
# needed if plone-group organization is imported
plonegroup_org_title =
organizations_filename =
organizations_fieldnames = _id _oid title description organization_type use_parent_address street number additional_address_details zip_code city phone cell_phone fax email website region country enterprise_number _uid _ic
persons_filename =
persons_fieldnames = _id lastname firstname gender person_title birthday use_parent_address street number additional_address_details zip_code city phone cell_phone fax email website region country internal_number _uid _ic
held_positions_filename =
held_positions_fieldnames = _id _pid _oid _fid label start_date end_date use_parent_address street number additional_address_details zip_code city phone cell_phone fax email website region country _uid _ic

[initialization]
blueprint = collective.contact.importexport.init
# basepath is an absolute directory. If empty, buildout dir will be used
basepath =
# if subpath, it will be appended to basepath
subpath = imports

[csv_disk_source]
blueprint = collective.contact.importexport.csv_disk_source
organizations_filename = ${config:organizations_filename}
persons_filename = ${config:persons_filename}
held_positions_filename = ${config:held_positions_filename}

[csv_ssh_source]
blueprint = collective.contact.importexport.csv_ssh_source
servername = sftp-client.imio.be
username =
server_files_path = .../upload_success
registry_filename = 0_registry.dump
transfer_path = imports/copied

[csv_reader]
blueprint = collective.contact.importexport.csv_reader
fmtparam-strict = python:True
csv_headers = python:True

[common_input_checks]
blueprint = collective.contact.importexport.common_input_checks
phone_country = BE
language = fr
organization_uniques = _uid internal_number
organization_booleans = use_parent_address _ic _inactive
person_uniques = _uid internal_number
person_booleans = use_parent_address _ic _inactive
held_position_uniques = _uid
held_position_booleans = use_parent_address _ic _inactive

[plonegrouporganizationpath]
blueprint = imio.transmogrifier.contact.plonegrouporganizationpath
plonegroup_org_title = ${config:plonegroup_org_title}

[plonegroupinternalparent]
blueprint = imio.transmogrifier.contact.plonegroupinternalparent

[iadocs_inbw_subtitle]
blueprint = imio.transmogrifier.contact.iadocs_inbw_subtitle_updater

[dependencysorter]
blueprint = collective.contact.importexport.dependencysorter

[relationsinserter]
blueprint = collective.contact.importexport.relationsinserter

[updatepathinserter]
blueprint = collective.contact.importexport.updatepathinserter
# list of 'column' 'index name' 'item condition' 'must-exist' quartets used to search in catalog for an existing object
organization_uniques = _uid UID python:True python:True
person_uniques = _uid UID python:True python:True internal_number mail_type python:item['_ic'] python:False internal_number internal_number python:options['cbin']=='True' python:False
held_position_uniques = _uid UID python:True python:True

[pathinserter]
blueprint = collective.contact.importexport.pathinserter
organization_id_keys = title
person_id_keys = firstname lastname
held_position_id_keys = label

[constructor]
blueprint = collective.transmogrifier.sections.constructor

[iadocs_userid]
blueprint = imio.transmogrifier.contact.iadocs_userid_inserter

[iadocs_creating_group]
blueprint = imio.transmogrifier.contact.iadocs_creating_group_inserter
creating_group = ${config:creating_group}

[schemaupdater]
blueprint = transmogrify.dexterity.schemaupdater

[reindexobject]
blueprint = plone.app.transmogrifier.reindexobject

[transitions_inserter]
blueprint = collective.contact.importexport.transitions_inserter

[workflowupdater]
blueprint = plone.app.transmogrifier.workflowupdater

[short_log]
blueprint = collective.contact.importexport.short_log

[lastsection]
blueprint = collective.contact.importexport.lastsection

[logger]
blueprint = collective.transmogrifier.sections.logger
name = logger
level = INFO
delete =
    _oid
    title
    description
    organization_type
    use_parent_address
    street
    number
    additional_address_details
    zip_code
    city
    phone
    cell_phone
    fax
    email
    website
    region
    country
    internal_number
    _uid
    _ic
    lastname
    firstname
    gender
    person_title
    birthday
    _pid
    _fid
    label
    start_date
    end_date
    position
    userid
    _files
    _level
    _ln
    _parent
    _typ

[breakpoint]
blueprint = collective.contact.importexport.breakpoint
condition = python:item.get('_id', u'') == u'0'
</value>
  </record>

</registry>
